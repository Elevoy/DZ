{
	"info": {
		"_postman_id": "c87b8bb1-68ad-4aa0-bb09-6fb75225beb0",
		"name": "PM_hw_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1_Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Lena",
							"type": "text"
						},
						{
							"key": "password",
							"value": "str",
							"type": "text"
						}
					]
				},
				"url": "{{url}}login"
			},
			"response": []
		},
		{
			"name": "2_RAW_JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Point 2: Проверка структуры json в ответе\r",
							"pm.test(\"JSON_Schema is ok\", function () {const schema = {\r",
							"   \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"});\r",
							"\r",
							"// Point 3: В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let salary = jsonData.start_qa_salary;\r",
							"let salary_start= JSON.parse(request.data).salary\r",
							"\r",
							"let salary_6mnth = + jsonData.qa_salary_after_6_months;\r",
							"let salary_12mnth = + jsonData.qa_salary_after_12_months;\r",
							"let salary_1_5_year = + jsonData.person.u_salary_1_5_year\r",
							"\r",
							"pm.test(\"Check salary\", function() {\r",
							"    pm.expect(salary_start).to.eql(salary);\r",
							"    });\r",
							"pm.test(\"Check salary_6mnth\", function() {\r",
							"    pm.expect(salary_6mnth).to.eql(salary_start*2);\r",
							"    });\r",
							"pm.test(\"Check salary_12mnth\", function() {\r",
							"    pm.expect(salary_12mnth).to.eql(salary_start*2.9);\r",
							"    });\r",
							"pm.test(\"Check salary_1_5_year\", function() {\r",
							"    pm.expect(salary_1_5_year).to.eql(salary_start*4);\r",
							"    });\r",
							"\r",
							"// Point 4: Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"  \r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Lena\",\r\n    \"salary\": 1000,\r\n    \"age\": \"{{age}}\",\r\n    \"auth_token\": \"{{token}}\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}user_info"
			},
			"response": []
		},
		{
			"name": "3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Point 2: Проверка структуры json в ответе\r",
							"\r",
							"pm.test(\"JSON_Schema is ok\", function () {const schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"});\r",
							"\r",
							"// Point 3: В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let jsonData = pm.response.json();\r",
							"let sal = jsonData.salary[0]\r",
							"console.log(\"sal =\",sal)\r",
							"let salary_2 = + jsonData.salary[1]\r",
							"console.log(\"salary_2 =\", salary_2)\r",
							"let salary_3 = + jsonData.salary[2]\r",
							"console.log(\"salary_3 =\", salary_3)\r",
							"\r",
							"pm.test(\"Check salary*2\", function() {\r",
							"    pm.expect(salary_2).to.eql(sal*2);\r",
							"    });\r",
							"pm.test(\"Check salary*3\", function() {\r",
							"    pm.expect(salary_3).to.eql(sal*3);\r",
							"    });\r",
							"\r",
							"// Point 4: Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Salary*2 > salary\", function() {\r",
							"pm.expect(sal).to.most(salary_2);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary*3 > salary\", function() {\r",
							"pm.expect(sal).to.most(salary_3);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Lena",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}new_data"
			},
			"response": []
		},
		{
			"name": "4_Pets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" // Point 2: Проверка структуры json в ответе\r",
							"\r",
							" pm.test(\"JSON_schema is ok\", function () {const schema = {\r",
							"\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"});\r",
							"// Point 3: В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							" var jsonData = pm.response.json();\r",
							" let wght = JSON.parse(request.data.weight);\r",
							" let daily_food = jsonData.daily_food;\r",
							" let daily_sleep = jsonData.daily_sleep;\r",
							"\r",
							"pm.test(\"Check_daily_food\", function () {\r",
							"       pm.expect(daily_food).to.eql(wght*0.012);\r",
							"});\r",
							"pm.test(\"Check_daily_sleep\", function () {\r",
							"       pm.expect(daily_sleep).to.eql(wght*2.5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "2",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "5",
							"type": "text"
						},
						{
							"key": "name",
							"value": "DJ",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					],
					"query": [
						{
							"key": "age",
							"value": "2",
							"disabled": true
						},
						{
							"key": "weight",
							"value": "5",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Dj",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5_Get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Point 2: Проверка структуры json в ответе\r",
							"\r",
							"pm.test(\"JSON_schema is ok\", function () {\r",
							"    const schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"age\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"family\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"children\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": [\r",
							"                            {\r",
							"                                \"type\": \"array\",\r",
							"                                \"items\": [\r",
							"                                    {\r",
							"                                        \"type\": \"string\"\r",
							"                                    },\r",
							"                                    {\r",
							"                                        \"type\": \"integer\"\r",
							"                                    }\r",
							"                                ]\r",
							"                            },\r",
							"                            {\r",
							"                                \"type\": \"array\",\r",
							"                                \"items\": [\r",
							"                                    {\r",
							"                                        \"type\": \"string\"\r",
							"                                    },\r",
							"                                    {\r",
							"                                        \"type\": \"integer\"\r",
							"                                    }\r",
							"                                ]\r",
							"                            }\r",
							"                        ]\r",
							"                    },\r",
							"                    \"u_salary_1_5_year\": {\r",
							"                        \"type\": \"integer\"\r",
							"                    }\r",
							"                },\r",
							"                \"required\": [\r",
							"                    \"children\",\r",
							"                    \"u_salary_1_5_year\"\r",
							"                ]\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"salary\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\r",
							"            \"age\",\r",
							"            \"family\",\r",
							"            \"name\",\r",
							"            \"salary\"\r",
							"        ]\r",
							"    }\r",
							"});\r",
							"\r",
							"// Point3: Проверить, что занчение поля name = значению переменной name из окружения\r",
							"var jsonData = pm.response.json();\r",
							"let user_name = request.data.name\r",
							"\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(user_name).to.eql(environment.name);\r",
							"});\r",
							"\r",
							"// Point 4: Проверить, что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"let age_user = + jsonData.age;\r",
							"\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(age_user).to.eql(+request.data.age);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "19",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "u_salary_1_5_year",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": "{{url}}get_test_user"
			},
			"response": []
		},
		{
			"name": "6_Currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запроc\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"let x = jsonData.length\r",
							"    console.log(\"How many massives = \", jsonData.length)\r",
							"\r",
							"function getrandomInt(x) {\r",
							"    return Math.floor(Math.random() * x);\r",
							"};\r",
							"    console.log(\"Massive number = \", getrandomInt(x))\r",
							"    console.log(massive = jsonData[getrandomInt(x)])\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", massive.Cur_ID);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}currency"
			},
			"response": []
		},
		{
			"name": "7_Curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Point 2: Проверка структуры json в ответе\r",
							"\r",
							"pm.test(\"JSON_Schema is ok\", function () {const schema = { \r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}curr_byn"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"value": "",
			"disabled": true
		},
		{
			"value": "",
			"disabled": true
		},
		{
			"value": "",
			"disabled": true
		}
	]
}