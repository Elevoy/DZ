{
	"info": {
		"_postman_id": "127284ae-a3c0-4578-aad0-2c4126a9373a",
		"name": "PM_hw_1_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что в body приходит правильный string\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}first"
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"// 3. Спарсить response body в json\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"4. Compare Name\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(\"Lena\");\r",
							"});\r",
							"console.log(jsonData.name)\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"5. Compare Age\", function () {\r",
							"        pm.expect(+jsonData.age).to.eql(19);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"7. Compare Salary\", function () {\r",
							"      pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 7. Спарсить request\r",
							"var req_age = JSON.parse(request.data.age)\r",
							"var req_salary = JSON.parse(request.data.salary)\r",
							"var req_name = request.data.name\r",
							"console.log(req_age, req_salary, req_name)\r",
							"// 8. Проверить, что name в ответе равно name request (name забрать из request.)\r",
							"pm.test(\"8. Compare name with requst.name\", function () {\r",
							"\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"9. Compare age with request.age\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age)\r",
							"});\r",
							"console.log(request.data.age)\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"10. Compare salary with reguest.salary\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql(+request.data.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"12. Check u_salary_1_5_year = Salary*4\", function() {\r",
							"   pm.expect(+jsonData.u_salary_1_5_year).to.eql((request.salary)*4)\r",
							"});\r",
							"\r",
							"console.log(pm.variables.get(\"name\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "str",
							"disabled": true
						},
						{
							"key": "age",
							"value": "int",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"// console.log(\"Response_body\", jsonData)\r",
							"\r",
							"// 4. Спарсить request\r",
							"console.log(\"Request_Name =\", reqName = pm.request.url.query.toObject().name);\r",
							"console.log(\"Request_Age =\", reqAge = pm.request.url.query.toObject().age);\r",
							"console.log(\"Request_Salary =\", reqSalary = + pm.request.url.query.toObject().salary);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"5.Compare name\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqName)\r",
							"})\r",
							"console.log(jsonData.name)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"6.Compare Age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqAge)\r",
							"})\r",
							"// console.log(JSON.parse(request.data.age))\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"7.Compare Salary\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql(reqSalary)\r",
							"})\r",
							"\r",
							"// // 8. Вывести в консоль параметр family из response\r",
							"console.log(\"Family: \", jsonData.family)\r",
							"\r",
							"// // 9. Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"9.Check dog have name\",  function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.exist\r",
							"});\r",
							"\r",
							"// // 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"10.Check dog have age\", function () {    \r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"// // 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"11.Check dog name is Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"\r",
							"});\r",
							"console.log(\"Dog_name: \", jsonData.family.pets.dog.name)\r",
							"\r",
							"// // 12.Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"12.Check dog age: 4years\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"console.log(\"age: \", jsonData.family.pets.dog.age)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}object_info_3?name=Lena&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lena"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json\r",
							"var jsonData = pm.response.json()\r",
							"// 4. Спарсить request\r",
							"console.log(\"Request_Name =\", reqName = pm.request.url.query.toObject().name);\r",
							"console.log(\"Request_Age =\", reqAge = pm.request.url.query.toObject().age);\r",
							"console.log(\"Request_Salary =\", reqSalary = + pm.request.url.query.toObject().salary);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check Name\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqName)\r",
							"})\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check Age\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(+reqAge)\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request\r",
							"console.log(\"Salary from request = \", reqSalary)\r",
							"// 8. Вывести в консоль параметр salary из response\r",
							"console.log(\"Salary from response = \", jsonData.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Salary[0] from response = \", jsonData.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(\"Salary[1] fron response = \", +jsonData.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(\"Salary[2] from response = \", +jsonData.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"12.Check salary[0] = salary\", function() {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(reqSalary)\r",
							"})\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"13.Check salary[1] = salary*2\", function() {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(reqSalary*2)\r",
							"})\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"14.Chack salary[2] = salary*3\", function() {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(reqSalary*3)\r",
							"})\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							"pm.test(\"21.Cycle Salary\", jsonData.salary.forEach(function(i) {\r",
							"    console.log(i)\r",
							"    })\r",
							");\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}object_info_4?name=Lena&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Lena"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"// 6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request\r",
							"     console.log(\"Parse request =\", request.data.name, JSON.parse(request.data.age), +request.data.salary)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"8. Check response include start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"9. Check response include qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"10. Check response include qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"11. Check response include qa_salary_after_1.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"12. Check response include qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"13. Check response include person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"14. start_qa_salary = request salary\", function() {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+request.data.salary)\r",
							"\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"15. qa_salary_after_6_months = salary*2\", function() {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+request.data.salary*2)\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"16. qa_salary_after_12_months = salary*2.7\", function() {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+request.data.salary*2.7)\r",
							"})\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.environment.set(\"salary_1_5_year\", jsonData[\"qa_salary_after_1.5_year\"]);\r",
							"pm.test(\"17. qa_salary_after_1.5_year = salary*3.3\", function() {\r",
							"    pm.expect(environment.salary_1_5_year).to.eql(+request.data.salary*3.3)\r",
							"})\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.environment.set(\"salary_3_5_year\", jsonData[\"qa_salary_after_3.5_years\"]);\r",
							"pm.test(\"18. qa_salary_after_3.5_years = salary*3.5\", function() {\r",
							"    pm.expect(environment.salary_3_5_year).to.eql(JSON.parse(request.data.salary*3.8))\r",
							"});\r",
							"    \r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"19. reponse.salary = request.salary\",function() {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+request.data.salary)\r",
							"})\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"20. reponse.u_age = request.age\", function() {\r",
							"    pm.expect(jsonData.person.age).to.eql(request.data.u_age)\r",
							"})\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"21. u_salary_5_years = salary*4.2\", function() {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+request.data.salary*4.2)\r",
							"});\r",
							"\r",
							"// 22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"pm.test(\"22. Person list\", function () {\r",
							"  Object.keys(jsonData.person).forEach(function(i)  {\r",
							"  console.log(i, jsonData.person[i]);\r",
							"})});\r",
							"\r",
							"// pm.test(\"22. Person list\", function () {\r",
							"//   for(let i in jsonData.person){\r",
							"// console.log(i);\r",
							"// }});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Lena",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}